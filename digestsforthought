#!/usr/bin/env python
#
# Copyright 2017 Richard Dawe
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import time
import twitter
from sparkpost import SparkPost
import random
import json

def FetchConfig():
    configfile = open("config.json")
    return json.load(configfile)

config = FetchConfig()

# XXX: Support getting these from enviroment variables again.
# And/or a configuration file that doesn't contain rest of settings.
#
#twitter_consumer_key=os.environ.get('TWITTER_CONSUMER_KEY')
#twitter_consumer_secret=os.environ.get('TWITTER_CONSUMER_SECRET')
#twitter_access_token_key=os.environ.get('TWITTER_ACCESS_TOKEN_KEY')
#twitter_access_token_secret=os.environ.get('TWITTER_ACCESS_TOKEN_SECRET')
#
#sparkpost_api_key=os.environ.get('SPARKPOST_API_KEY')

twitter_consumer_key=config["twitter_consumer_key"]
twitter_consumer_secret=config["twitter_consumer_secret"]
twitter_access_token_key=config["twitter_access_token_key"]
twitter_access_token_secret=config["twitter_access_token_secret"]

sparkpost_api_key=config["sparkpost_api_key"]
sparkpost_base_uri=config["sparkpost_base_uri"]
if sparkpost_base_uri is None:
    sparkpost_base_uri='https://api.sparkpost.com'

# XXX: how do I ship an app with this consumer key+secret so no-one can decode them?
api = twitter.Api(consumer_key=twitter_consumer_key,
                  consumer_secret=twitter_consumer_secret,
                  access_token_key=twitter_access_token_key,
                  access_token_secret=twitter_access_token_secret,
                  tweet_mode='extended')

sp = SparkPost(api_key=sparkpost_api_key, base_uri=sparkpost_base_uri)

#print(api.VerifyCredentials())

# XXX: Allow retweets to be skipped?
def FetchTweets(config):
    results=[]

    for screen_name in config['screen_names']:
        user = api.GetUser(screen_name=screen_name)
        statuses = api.GetUserTimeline(screen_name=screen_name, count=config['fetch_per_user'])
        sample_size = config['select_per_user']
        if sample_size > len(statuses):
            sample_size = len(statuses)
        if sample_size > 0:
            chosen = random.sample(statuses, sample_size)
            results.append({
                'screen_name': screen_name,
                'name': user.name,
                'image_url': user.profile_image_url,
                'chosen': chosen
            })

    return results

# Some choice messages of the day
def FetchMOTDs():
    # Source: https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing
    networkFallacies = [
        "1. The network is reliable.",
        "2 Latency is zero.",
        "3. Bandwidth is infinite.",
        "4. The network is secure.",
        "5. Topology doesn't change.",
        "6. There is one administrator.",
        "7. Transport cost is zero.",
        "8. The network is homogeneous.",
    ]
    return {
        "Fallacy of Distributed Computing": random.choice(networkFallacies)
    }

# XXX: Nicer formatting for tweets:
#
# - Box around each user's tweet
# - Image on left
# - Tweets on right aligned w/ top of image
#
def FormatMessages(config, tweets, motds):
    datestamp=time.strftime("%a %d %b")
    subject='Digests for Thought for %s' % (datestamp)

    text='\n'
    html='''
<html>
<head><title>%s</title></head>
<body>
''' % (subject)

    for m in motds:
        text += "%s: %s\n\n" % (m, motds[m])
        html += "<p><b>%s:</b> %s</p>\n\n" % (m, motds[m])

    for r in tweets:
        text += "%s (%s)\n\n" % (r['screen_name'], r['name'])
        html += "<p><img src=\"%s\">&nbsp;<b>@%s (%s)</b></p>\n" % (r['image_url'], r['screen_name'], r['name'])
        html += "<p><ul>\n"

        for s in r['chosen']:
            stripped_text = s.full_text.strip()
            link = "https://twitter.com/%s/status/%s" % (s.user.screen_name, s.id_str)
            # Click tracking is really distracting for links in the text part,
            # so disable click tracking. Also, use a pipe separator
            # to work around an apparent bug where link-attr seems to be ignored
            # in the link parser: "[ link[[link-attr]] ]" doesn't seem to work.
            text += " * %s | %s[[data-msys-clicktrack=\"0\"]]\n" % (stripped_text, link)
            html += '<li>%s [ <a href="%s">View tweet</a> ]</li>\n' % (stripped_text, link)

        text += '\n'
        html += '</ul></p>\n'

    html += '''
</body>
</html>
'''

    if config['debug']:
        print(text)
        print(html)

    return { 'subject': subject, 'text': text, 'html': html }

def handler(event, context):
    config = FetchConfig()
    tweets = FetchTweets(config)
    motds = FetchMOTDs()
    formatted = FormatMessages(config, tweets, motds)

    response = sp.transmissions.send(
        recipients=config['recipients'],
        from_email=config['sender'],
        subject=formatted['subject'],
        text=formatted['text'],
        html=formatted['html']
    )

    # Convert this into success/failure
    print(response)

if __name__ == "__main__":
    handler(None, None)

